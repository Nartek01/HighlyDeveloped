@inherits Umbraco.Web.Mvc.UmbracoViewPage<ContentModels.Search>
@using ContentModels = Umbraco.Web.PublishedModels;
@{
    Layout = "main.cshtml";
    var searchQuery = Request.QueryString["query"];
    IEnumerable<PublishedSearchResult> searchResults;
    var resultsCount = 0;

    // Is someone searching?
    if (!string.IsNullOrEmpty(searchQuery))
    {
        // Pass the searchQuery to Umbraco and render the result.
        searchResults = Umbraco.ContentQuery.Search(searchQuery, string.Empty);
        resultsCount = searchResults != null && searchResults.Any() ? searchResults.Count() : 0;
    }
    else
    {
        searchResults = null;
    }
    var heroOverlayColour = Model.Value<string>("heroOverlayColour");
}

@if (!string.IsNullOrEmpty(heroOverlayColour))
{
    <style>
	.home-hero > .overlay {
		background-color: #@heroOverlayColour !important;
		opacity: 0.70 !important;
	}
    </style>
}

@Html.Partial("hero")

<header>
    <form action="@Model.Url" method="get">
        <fieldset>
            <input type="text" name="query" placeholder="Search..." />
            <button class="class-search">Search</button>
        </fieldset>
    </form>
</header>
<h1>Search</h1>
@*TODO Search results here... *@
@if (!string.IsNullOrEmpty(searchQuery))
{
    <section>
        @if (resultsCount == 0 || searchResults == null)
        {
            <textarea>
               Cannot find any results for @searchQuery
            </textarea>
        }
        else
        {
            <textarea>
               @resultsCount found results(s).
            </textarea>
        }
    </section>
}